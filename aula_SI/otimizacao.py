
import math
import random

ilumina = [[37, 51, 132, 276, 335, 356], [12, 16, 160, 220, 240, 243, 271, 278, 336], [73, 102, 255, 264], [57, 76, 83, 118, 131, 284, 325], [25, 38, 61, 84, 92, 154, 193, 221, 225, 233, 240, 250, 310, 350, 379], [5, 80, 174, 190, 194, 232, 306, 358, 394], [32, 151, 169, 218, 247, 289, 345], [9, 10, 19, 28, 94, 144, 188, 211, 249, 253, 260, 352], [49, 139, 214, 224, 236, 253], [67, 286, 353, 395, 397], [15, 84, 138, 152, 156, 297, 323, 375, 395], [65, 78, 80, 110, 196, 200, 332, 363], [56, 129, 145, 162, 173, 235, 332], [40, 59, 227, 257, 291, 293, 303, 306, 353, 388, 398], [14, 62, 195, 241, 267, 355, 370], [25, 67, 120, 182, 245, 300, 364], [0, 41, 296, 339], [58, 75, 114, 258, 290, 367], [134, 179], [50, 100, 171, 187, 216, 230], [6, 13, 42, 89, 92, 265, 273], [96, 115, 185, 205, 221, 282, 370], [192, 199, 232, 237, 255, 269, 277, 279, 322, 339, 382], [194, 228, 244, 252, 275, 313, 334, 340], [59, 202, 233, 249, 366], [231, 259, 272, 276, 314, 319, 320, 322, 366], [18, 20, 24, 89, 229, 302, 324, 333, 396], [28, 43, 48, 57, 104, 117, 135, 160, 177, 206, 254], [121, 124, 166, 168, 351, 380], [15, 44, 210, 242, 251, 254], [85, 153, 269, 363], [50, 115, 153, 207, 341, 365], [35, 86, 93, 136, 248, 285, 301, 342, 347, 359], [2, 13, 69, 101, 198, 203, 244, 326, 361], [42, 71, 117, 131, 144, 198, 284, 388], [4, 10, 54, 76, 85, 100, 163, 180, 248], [12, 63, 91, 106, 112, 157, 215, 239, 270, 299, 369], [31, 51, 123, 168, 182, 214, 275, 307, 311, 372], [37, 46, 208, 234, 246, 262, 371, 386], [94, 149, 184, 224, 226, 283, 324, 372], [66, 129, 152, 191, 391, 392], [18, 145, 242, 381, 382], [173, 183, 208, 316], [31, 40, 64, 79, 88, 110, 111, 121, 163, 187, 204, 281, 285, 360], [96, 172, 180, 212, 263, 267, 304, 304, 308, 333, 337, 351, 393], [], [6, 63, 217, 250, 251, 390], [29, 130, 147, 210, 256, 381, 396], [52, 60, 88, 181, 207, 236], [4, 35, 44, 55, 78, 119, 123, 230, 354], [11, 70, 124, 331, 352], [2, 7, 26, 27, 30, 65, 97, 189, 282, 299, 376, 378], [27, 39, 101, 141, 195, 227, 234, 316, 371], [26, 53, 83, 91, 126, 176, 338, 349, 360], [47, 108, 150, 169, 287, 362, 362, 374], [116, 159, 223, 317], [62, 69, 239, 379], [45, 86, 105, 112, 127, 136, 166, 170, 364, 376], [17, 30, 47, 191, 247, 298, 337, 347, 348], [17, 120, 133, 137, 229, 263, 271, 309], [22, 54, 64, 122, 128, 181, 200, 220, 264, 365, 373, 377], [22, 142, 341, 345], [49, 161, 193, 199, 206, 312, 315, 342, 399], [79, 113, 215, 245, 287], [8, 21, 46, 56, 102, 125, 128, 146, 213, 238, 268, 274, 288, 307, 389], [60, 81, 158, 183, 189, 243, 318], [11, 34, 138, 294, 330, 346, 374, 389, 392], [14, 107, 150, 279, 300, 323, 356, 377], [36, 68, 74, 127, 155, 196, 201, 231, 278, 281, 305, 334, 359], [81, 148, 280, 308, 310, 368], [1, 16, 55, 66, 143, 165, 203, 357, 385], [21, 68, 77, 93, 103, 140, 159, 197, 219, 238, 272, 289, 383], [23, 52, 77, 116, 130, 222, 296, 317, 348], [33, 41, 119, 167, 204, 258, 266, 273, 274, 305], [3, 23, 32, 33, 154, 261, 262, 286, 294], [95, 105, 143, 174, 295, 314, 327, 329, 335, 338], [126, 132, 178, 188, 225, 343, 393], [8, 70, 72, 99, 125, 161, 167, 170, 184, 295, 369, 384], [241, 361, 368], [36, 99, 148, 175, 190, 216, 252, 265, 277, 343], [48, 98, 133, 135, 171, 212, 226, 257, 266, 288, 309], [61, 72, 73, 256, 268, 326, 378, 383, 390], [98, 270, 298, 301], [137, 139, 162, 205, 293, 340, 358, 387, 391], [24, 172, 259, 328, 367], [1, 9, 95, 146, 237, 291, 292, 302, 354, 385], [90, 109, 228, 235, 312], [0, 58, 82, 103, 107, 118, 209, 213, 218, 350], [34, 108, 185, 192, 297, 325], [5, 82, 90, 149, 164, 217, 311, 313], [140, 156, 303, 344, 346, 384], [7, 38, 155, 157, 260, 318, 373, 375, 386], [43, 71, 75, 122, 134, 331, 357, 394, 398], [74, 114, 164, 219, 261, 321, 355, 380], [19, 39, 87, 87, 142, 158, 165, 202, 292, 320, 330, 349, 399], [53, 104, 109, 147, 176, 177, 290, 321, 327, 328, 329, 344], [3, 141, 223, 246, 387], [45, 97, 111, 113, 175, 186, 201, 319], [20, 29, 106, 151, 178, 186, 209, 211, 222, 283, 315, 336, 397], [179, 197, 280]]


def f(lampadas):
    return lampadas.count(True)


class Estado:
    def __init__(self, lampadas):
        self.lampadas = lampadas
        self.f = f(lampadas)


def mostra_estado(estado):
    print(f'lampadas: {estado.lampadas}, f(x): {estado.f}')


def estado_inicial():
    return Estado(100*[True])

def valido(lampadas):
    iluminada = 400*[False]
    for i in range(len(lampadas)):
        if(lampadas[i]):
            for casa in ilumina[i]:
                iluminada[casa] = True
    return iluminada.count(True) == 400

def mudar(estado):
    lampadas = estado.lampadas.copy()
    i = random.randint(0, 99)
    lampadas[i] = not lampadas[i]
    if(valido(lampadas)):
    	return Estado(lampadas)
 
    return estado

def vizinhos(estado):
    ret = []
    for i in range(5):
        vizinho = mudar(estado)
        ret.append(vizinho)
    return ret


def melhor_sucessor(estado):
    vizinhanca = vizinhos(estado)
    return min(vizinhanca, key=lambda e: e.f)


atual = estado_inicial()
while True:
    vizinho = melhor_sucessor(atual)

    if vizinho.f >= atual.f:
        break

    atual = vizinho

mostra_estado(atual)
    